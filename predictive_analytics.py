# -*- coding: utf-8 -*-
"""predictive_analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10z4nmXtpzABZYg4lxSR4zfGO0rGeUxCO

## **Predictive Analytics Terhadap Peristiwa Titanic**

Proyek ini bertujuan untuk menganalisis faktor-faktor yang berkontribusi terhadap peluang seorang penumpang untuk selamat dari tragedi. Masalah ini relevan untuk dipelajari karena dapat memberikan wawasan tentang pola keselamatan dan pengambilan keputusan di situasi darurat.

## **Import Library**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.cluster import KMeans
from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA
import plotly.express as px

# For Deep Learning
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

"""## **Loading Dataset**"""

data = sns.load_dataset('titanic')

print("Data Titanic:")
print(data.head())

"""## **Exploratory Data Analysis**"""

print("Deskripsi Data:")
print(data.describe(include='all'))
print("\nInfo Data:")
print(data.info())

"""## **Exploratory Data Analysis**"""

# Mengecek nilai yang hilang di setiap kolom
print("Nilai yang Hilang:")
print(data.isnull().sum())

# Mengisi nilai yang hilang
data['age'] = data['age'].fillna(data['age'].mean())
data['embarked'] = data['embarked'].fillna(data['embarked'].mode()[0])

# Cek jika kolom 'deck' ada, lalu mengisinya
if 'deck' in data.columns:
    data['deck'] = data['deck'].astype(str).fillna('Unknown')

data['embark_town'] = data['embark_town'].fillna('Unknown')

# Menghapus kolom yang sudah tidak ada diperlukan
data.drop(columns=['deck'], inplace=True, errors='ignore')
data.dropna(inplace=True)

print("Nilai yang Hilang Setelah Ditangani:")
print(data.isnull().sum())

"""## **Exploratory Data Analysis - Univariate Analysis**"""

# Visualisasi distribusi umur
plt.figure(figsize=(12, 6))
sns.histplot(data['age'], bins=30, kde=True)
plt.title('Distribusi Umur Penumpang')
plt.xlabel('Umur')
plt.ylabel('Frekuensi')
plt.show()

"""## **Exploratory Data Analysis - Multivariate Analysis**"""

# Visualisasi rasio kelangsungan hidup berdasarkan jenis kelamin
plt.figure(figsize=(8, 6))
sns.barplot(x='sex', y='survived', data=data)
plt.title('Rasio Kelangsungan Hidup berdasarkan Jenis Kelamin')
plt.ylabel('Rasio Kelangsungan Hidup')
plt.xlabel('Jenis Kelamin')
plt.show()

"""## **Data Preparation**"""

# Mengonversi kolom kategorikal menjadi dummy variables
data = pd.get_dummies(data, columns=['sex', 'embarked', 'pclass', 'embark_town'], drop_first=True)

# Memeriksa kolom yang ada di dalam DataFrame
print("Kolom yang ada dalam DataFrame:")
print(data.columns)

# Memisahkan fitur dan label
features_to_drop = ['survived', 'name', 'ticket', 'passenger_id']
# Hanya menyimpan kolom yang ada dalam daftar untuk dihapus
features_to_drop = [col for col in features_to_drop if col in data.columns]

X = data.drop(columns=features_to_drop)  # Menghapus kolom yang relevan
y = data['survived']  # Menyimpan kolom label

# Konversi kolom kategorikal 'class', 'who', dan 'alive' ke dummy variables
columns_to_convert = ['class', 'who', 'alive']
data = pd.get_dummies(data, columns=columns_to_convert, drop_first=True)

# Memisahkan fitur dan label kembali
features_to_drop = ['survived', 'name', 'ticket', 'passenger_id']
features_to_drop = [col for col in features_to_drop if col in data.columns]
X = data.drop(columns=features_to_drop)
y = data['survived']

# Cek tipe data fitur X lagi setelah konversi
print("Tipe data dari fitur X setelah konversi:")
print(X.dtypes)

"""## **Data Split**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## **Model Development Random Forerst**"""

# Model K-Nearest Neighbors
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# Prediksi
knn_predictions = knn.predict(X_test)

# Evaluasi
print(f"Akurasi K-Nearest Neighbors: {accuracy_score(y_test, knn_predictions):.2f}")
print("Laporan Klasifikasi KNN:\n", classification_report(y_test, knn_predictions))

# Model Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Prediksi
rf_predictions = rf.predict(X_test)

# Evaluasi
print(f"Akurasi Random Forest: {accuracy_score(y_test, rf_predictions):.2f}")
print("Laporan Klasifikasi Random Forest:\n", classification_report(y_test, rf_predictions))

# Model Boosting dengan Gradient Boosting
gb = GradientBoostingClassifier(n_estimators=100, random_state=42)
gb.fit(X_train, y_train)

# Prediksi
gb_predictions = gb.predict(X_test)

# Evaluasi
print(f"Akurasi Gradient Boosting: {accuracy_score(y_test, gb_predictions):.2f}")
print("Laporan Klasifikasi Gradient Boosting:\n", classification_report(y_test, gb_predictions))

"""## **Evaluasi Model**"""

# Membandingkan akurasi dari semua model
accuracies = {
    'KNN': accuracy_score(y_test, knn_predictions),
    'Random Forest': accuracy_score(y_test, rf_predictions),
    'Gradient Boosting': accuracy_score(y_test, gb_predictions)
}

print("Akurasi Semua Model:")
for model, accuracy in accuracies.items():
    print(f"{model}: {accuracy:.2f}")

"""## **Hasil Analisis**

**Peningkatan Keputusan Keselamatan**

Model Prediksi: Dengan hasil dari model seperti Gradient Boosting, perusahaan atau organisasi yang bertanggung jawab atas keselamatan penumpang dapat mengetahui faktor-faktor yang memengaruhi kelangsungan hidup penumpang. Model ini akan membantu dalam merancang sistem evakuasi yang lebih efisien.

**Prioritas dalam Evakuasi**

Berdasarkan analisis model, penumpang perempuan dan anak-anak cenderung memiliki peluang bertahan hidup lebih tinggi, sedangkan pria dewasa dan penumpang dari kelas rendah memiliki peluang bertahan hidup lebih rendah. Hal ini dapat digunakan untuk memprioritaskan evakuasi berdasarkan analisis kelompok-kelompok tersebut.
"""